name: CI for ASP.NET Web API and Next.js
on:
  push:
    branches:
      - CypressEndToEndTests
  pull_request:
    branches:
      - main
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Setup .NET environment
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "9.0.x"

      # Restore .NET dependencies
      - name: Restore dependencies
        run: dotnet restore ./TournamentOrganizer/TournamentOrganizer.sln

      # Create .env file for Docker Compose
      - name: Create .env file
        run: |
          mkdir -p ../../secrets
          cat << EOF > ../../secrets/.env
          db_password=YourStrong!Passw0rd
          DOCKER_REGISTRY=
          EOF

      # Create Docker Compose override for CI
      - name: Create Docker Compose override
        run: |
          cat << EOF > docker-compose.ci.yml
          services:
            db:
              environment:
                - ACCEPT_EULA=Y
                - SA_PASSWORD=YourStrong!Passw0rd
            tournamentorganizer.api:
              build:
                context: .
                dockerfile: TournamentOrganizer/Dockerfile
              environment:
                - ASPNETCORE_ENVIRONMENT=Development
                - ConnectionStrings__DefaultConnection=Server=localhost;Database=TournamentDb;User=sa;Password=YourStrong!Passw0rd;TrustServerCertificate=True
            frontend:
              build:
                context: ./tournamentorganizer-react
                dockerfile: Dockerfile
              environment:
                - NEXT_PUBLIC_API_URL=/api
          EOF

      # Start only the database service
      - name: Start database
        run: |
          docker compose -f docker-compose.yml -f docker-compose.ci.yml --env-file ../../secrets/.env up db -d
          echo "Waiting for database to start..."
          sleep 15

      # Run all .NET tests
      - name: Run .NET tests
        run: |
          dotnet test ./TournamentOrganizer/TournamentOrganizer.sln \
            --no-restore \
            --verbosity normal \
            --configuration Release \
            --environment ConnectionStrings__DefaultConnection="Server=localhost;Database=TournamentDb;User=sa;Password=YourStrong!Passw0rd;TrustServerCertificate=True"

      # Start the remaining services
      - name: Start remaining services
        run: |
          docker compose -f docker-compose.yml -f docker-compose.ci.yml --env-file ../../secrets/.env up -d --build
          echo "Waiting for services to start..."
          sleep 30

      # Setup Node.js for running Cypress
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './tournamentorganizer-react/package-lock.json'

      # Install Cypress and other frontend dependencies
      - name: Install frontend dependencies
        working-directory: ./tournamentorganizer-react
        run: npm ci

      # Run Cypress tests
      - name: Run Cypress tests
        working-directory: ./tournamentorganizer-react
        run: npm run cypress:run

      # Upload Cypress artifacts if tests fail
      - name: Upload Cypress artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-artifacts
          path: |
            ./tournamentorganizer-react/cypress/screenshots
            ./tournamentorganizer-react/cypress/videos
          retention-days: 7

      # Stop Docker Compose services
      - name: Stop services
        if: always()
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml down
