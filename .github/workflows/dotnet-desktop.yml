name: CI for ASP.NET Web API and Next.js
on:
  push:
    branches:
      - CypressEndToEndTests
  pull_request:
    branches:
      - main
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Setup .NET environment
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "9.0.x"

      # Create simplified docker-compose for database only
      - name: Create Docker Compose file for database
        run: |
          cat << EOF > docker-compose.ci.yml
          services:
            db:
              image: mcr.microsoft.com/mssql/server:2022-latest
              environment:
                - ACCEPT_EULA=Y
                - SA_PASSWORD=YourStrong!Passw0rd
                - MSSQL_PID=Express
              ports:
                - "1433:1433"
          EOF

      # Start the database
      - name: Start database
        run: |
          docker compose -f docker-compose.ci.yml up -d
          echo "Waiting for database to start..."
          sleep 15

      # Restore .NET dependencies
      - name: Restore dependencies
        run: dotnet restore ./TournamentOrganizer/TournamentOrganizer.sln

      # Build the solution
      - name: Build solution
        run: dotnet build ./TournamentOrganizer/TournamentOrganizer.sln --configuration Release --no-restore

      # Run .NET tests
      - name: Run .NET tests
        env:
          ConnectionStrings__DefaultConnection: "Server=localhost;Database=TournamentDb;User=sa;Password=YourStrong!Passw0rd;TrustServerCertificate=True"
        run: |
          dotnet test ./TournamentOrganizer/TournamentOrganizer.sln \
            --no-restore \
            --verbosity normal \
            --configuration Release

      # Create appsettings.json for the API
      - name: Create API settings
        run: |
          cat << EOF > ./TournamentOrganizer/TournamentOrganizer/appsettings.Development.json
          {
            "ConnectionStrings": {
              "DefaultConnection": "Server=localhost;Database=TournamentDb;User=sa;Password=YourStrong!Passw0rd;TrustServerCertificate=True"
            },
            "Logging": {
              "LogLevel": {
                "Default": "Information",
                "Microsoft.AspNetCore": "Warning"
              }
            }
          }
          EOF

      # Start the API in the background
      - name: Start API
        env:
          ASPNETCORE_ENVIRONMENT: "Development"
          ConnectionStrings__DefaultConnection: "Server=localhost;Database=TournamentDb;User=sa;Password=YourStrong!Passw0rd;TrustServerCertificate=True"
        run: |
          dotnet run --project ./TournamentOrganizer/TournamentOrganizer/TournamentOrganizer.api.csproj --launch-profile Development &
          echo "Waiting for API to start..."
          sleep 10

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './tournamentorganizer-react/package-lock.json'

      # Install frontend dependencies
      - name: Install frontend dependencies
        working-directory: ./tournamentorganizer-react
        run: |
          npm ci --force
          npm run build

      # Start the frontend in the background
      - name: Start frontend
        working-directory: ./tournamentorganizer-react
        run: |
          npm run start &
          echo "Waiting for frontend to start..."
          sleep 10

      # Run Cypress tests
      - name: Run Cypress tests
        working-directory: ./tournamentorganizer-react
        run: npm run cypress:run

      # Upload Cypress artifacts if tests fail
      - name: Upload Cypress artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-artifacts
          path: |
            ./tournamentorganizer-react/cypress/screenshots
            ./tournamentorganizer-react/cypress/videos
          retention-days: 7

      # Cleanup
      - name: Stop services
        if: always()
        run: |
          docker compose -f docker-compose.ci.yml down
          pkill -f "dotnet run"
          pkill -f "npm run start"
