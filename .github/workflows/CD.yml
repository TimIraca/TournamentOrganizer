name: Deploy Tournament Organizer API
on:
  push:
    branches:
      - main 
jobs:
  build:
    runs-on: ubuntu-latest
    environment: Container
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.7.1
      
      - name: Docker Login
        uses: docker/login-action@v3.3.0
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        
      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: ./TournamentOrganizer
          file: ./TournamentOrganizer/TournamentOrganizer/Dockerfile
          push: true
          tags: timiraca/tournament_organizer_api:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment: production
    steps:
      - name: Check out repository
        uses: actions/checkout@v4.2.2
      
      - name: Create initialization script
        run: |
          cat > init.sql << 'EOL'
          IF NOT EXISTS (SELECT * FROM sys.databases WHERE name = 'TournamentOrganizer')
          BEGIN
              CREATE DATABASE TournamentOrganizer;
          END
          EOL
      
      - name: Deploy using Docker Compose
        env:
          SQL_SA_PASSWORD: ${{ secrets.SQL_SA_PASSWORD }}
        run: |
          # Stop and remove existing containers
          docker compose down --volumes --remove-orphans || true
          
          # Pull latest images
          docker compose pull
          
          # Start services
          docker compose up -d
          
          # Wait for SQL Server to be healthy
          echo "Waiting for SQL Server to be ready..."
          timeout=180
          elapsed=0
          interval=10
          while [ $elapsed -lt $timeout ]; do
            if docker compose ps sql | grep -q "healthy"; then
              echo "SQL Server is ready!"
              
              # Initialize database
              echo "Initializing database..."
              docker compose exec -T sql /opt/mssql-tools/bin/sqlcmd \
                -S localhost \
                -U sa \
                -P "$SQL_SA_PASSWORD" \
                -i init.sql
              
              echo "Database initialization completed"
              exit 0
            fi
            sleep $interval
            elapsed=$((elapsed + interval))
            echo "Still waiting... ($elapsed seconds elapsed)"
          done
          
          echo "Timeout waiting for SQL Server to be ready"
          docker compose logs sql
          exit 1
